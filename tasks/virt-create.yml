---
# Define the VM, unless it doesn't yet exist and is set to "undefined"
- name: Define VM
  shell: >
    set -o pipefail && virt-install
    --import
    --connect {{ hostvars[kvmhost].virt_infra_host_libvirt_url | default(virt_infra_host_libvirt_url) }}
    --cpu {{ virt_infra_cpu_model }}
    --controller type=scsi,model=virtio-scsi,index=0
    {% set scsi_disk_count = [] %}
    {% set scsi_controller_count = [] %}
    {% for disk in virt_infra_disks %}
    {% if disk.bus is defined and disk.bus == "nvme" %}
    --qemu-commandline='-drive file={{ hostvars[kvmhost].virt_infra_host_image_path | default(virt_infra_host_image_path) }}/{{ inventory_hostname }}-{{ disk.name }}.qcow2,format=qcow2,if=none,id={{ disk.name | upper }}'
    --qemu-commandline='-device nvme,drive={{ disk.name | upper }},serial={{ disk.name }}'
    {% else %}
    --disk {{ hostvars[kvmhost].virt_infra_host_image_path | default(virt_infra_host_image_path) }}/{{ inventory_hostname }}-{{ disk.name }}.qcow2,serial={{ disk.name }},{% if disk.name == "boot" %}boot_order=1,{% endif %}format=qcow2,bus={{ disk.bus | default(virt_infra_disk_bus) }}{% if disk.cache is defined and disk.cache %},cache={{ disk.cache }}{% endif %}{% if disk.io is defined and disk.io %},io={{ disk.io }}{% endif %}
    {% endif %}
    {% if (disk.bus is defined and disk.bus == "scsi" or disk.bus is undefined) and ( disk.ssd is defined and disk.ssd ) %}
    --qemu-commandline='-set device.scsi{{ scsi_controller_count | length }}-0-0-{{ scsi_disk_count | length }}.rotation_rate=1'
    {% endif %}
    {% if disk.bus is defined and disk.bus == "scsi" or disk.bus is undefined %}
    {% set __ = scsi_disk_count.append(1) %}
    {% endif %}
    {% if scsi_disk_count | length > 6  %}
    {% set __ = scsi_disk_count.clear() %}
    {% set __ = scsi_controller_count.append(1) %}
    --controller type=scsi,model=virtio-scsi,index={{ scsi_controller_count | length }}
    {% endif %}
    {% endfor %}
    {% if scsi_disk_count | length > 3  %}
    --controller type=scsi,model=virtio-scsi,index={{ ( scsi_controller_count | length ) + 1 }}
    {% endif %}
    --disk {{ hostvars[kvmhost].virt_infra_host_image_path | default(virt_infra_host_image_path) }}/{{ inventory_hostname }}-cloudinit.iso,device=cdrom,bus=scsi,format=iso
    --channel unix,target_type=virtio,name=org.qemu.guest_agent.0
    --graphics {{ virt_infra_graphics }}
    --machine {{ virt_infra_machine_type }}
    --name {{ inventory_hostname }}
    {% for network in virt_infra_networks %}
    {% if network.type is defined and network.type == "bridge" %}
    --network bridge={{ network.name }},mac={{ network.mac | default(('52:54:' + ("%02d" | format(loop.index0) |string)) | random_mac(seed=inventory_hostname)) }}{% if network.model is defined and network.model %},model={{ network.model }}{% endif %}{% if network.mtu is defined and network.mtu %},mtu.size={{ network.mtu }}{% endif %}
    {% elif network.type is defined and network.type == "ovs" %}
    --network network={{ network.name }},mac={{ network.mac | default(('52:54:' + ("%02d" | format(loop.index0) |string)) | random_mac(seed=inventory_hostname)) }},portgroup={{ network.portgroup }}{% if network.model is defined and network.model %},model={{ network.model }}{% endif %}{% if network.mtu is defined and network.mtu %},mtu.size={{ network.mtu }}{% endif %}
    {% else %}
    --network network={{ network.name }},mac={{ network.mac | default(('52:54:' + ("%02d" | format(loop.index0) |string)) | random_mac(seed=inventory_hostname)) }}{% if network.model is defined and network.model %},model={{ network.model }}{% endif %}{% if network.mtu is defined and network.mtu %},mtu.size={{ network.mtu }}{% endif %}
    {% endif %}
    {% endfor %}
    --noreboot
    --noautoconsole
    --events on_reboot=restart
    --os-type linux
    {% if virt_infra_variant is defined and virt_infra_variant %}
    --os-variant {{ virt_infra_variant }}
    {% else %}
    --osinfo detect=on,require=off
    {% endif %}
    --memory {{ virt_infra_ram }},maxmemory={{ virt_infra_ram_max }}
    --rng /dev/urandom
    --serial pty
    --sound none
    --vcpus {{ virt_infra_cpus }}{% if virt_infra_cpus_max is defined and virt_infra_cpus_max %},maxvcpus={{ virt_infra_cpus_max }}{% endif %}
    --virt-type kvm
    {% if virt_infra_boot_mode is defined and virt_infra_boot_mode == "uefi" %}
    --boot loader.readonly=yes
    --boot loader.type=pflash
    --boot loader.secure=no
    --boot loader=/usr/share/OVMF/OVMF_CODE.secboot.fd
    --boot nvram.template=/usr/share/OVMF/OVMF_VARS.fd
    {% endif %}
  become: true
  register: result_vm_create
  retries: 10
  delay: 2
  until: result_vm_create is succeeded
  when:
    - inventory_hostname not in groups['kvmhost']
    - inventory_hostname not in hostvars[kvmhost].result_all_vms.list_vms
    - virt_infra_state != "undefined"
  delegate_to: "{{ kvmhost }}"
  args:
    executable: /bin/bash

# Set VM state, unless it doesn't yet exist and is set to "undefined"
- name: Set state of VM
  virt:
    name: "{{ inventory_hostname }}"
    state: "{{ 'destroyed' if ( virt_infra_state == 'undefined' or (virt_infra_state == 'shutdown' and inventory_hostname in inventory_hostname not in hostvars[kvmhost].result_running_vms.list_vms)) else virt_infra_state }}"
    autostart: "{{ virt_infra_autostart }}"
    uri: "{{ hostvars[kvmhost].virt_infra_host_libvirt_url | default(virt_infra_host_libvirt_url) }}"
  become: true
  register: result_vm_state
  retries: 30
  delay: 2
  until: result_vm_state is succeeded
  when:
    - inventory_hostname not in groups['kvmhost']
    - not (virt_infra_state == "undefined" and inventory_hostname not in hostvars[kvmhost].result_all_vms.list_vms)
  delegate_to: "{{ kvmhost }}"

# Wait for network so we can get the IP to log in
# Do this for all VMs, in case they already existed and IP has changed
- name: Get IP address of VM
  shell: >
    set -o pipefail ;
    virsh
    --connect {{ hostvars[kvmhost].virt_infra_host_libvirt_url | default(virt_infra_host_libvirt_url) }}
    domifaddr
    --source agent
    {{ inventory_hostname }}
    | grep -v 'N/A'
    | grep -vw lo
    | grep ipv4
    | grep -Ei '([0-9a-z]{2}:){5}[0-9a-z]{2}'
    | head -1
    | awk '{ print $NF}'
    | awk -F "/" '{print $1}'
  register: result_get_ip
  until: result_get_ip.stdout
  retries: 30
  delay: 10
  become: true
  delegate_to: "{{ kvmhost }}"
  when:
    - inventory_hostname not in groups['kvmhost']
    - virt_infra_state == "running"
  changed_when: false
  args:
    executable: /bin/bash

- name: Store IP of VM
  set_fact:
    vm_ip: "{{ result_get_ip.stdout }}"
  when:
    - inventory_hostname not in groups['kvmhost']
    - virt_infra_state == "running"
